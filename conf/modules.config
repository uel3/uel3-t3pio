/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PARSE_GENBANK {
        publishDir = [
            path: { "${params.outdir}/Parsed_GBKs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: COMBINE_JSON {
         publishDir = [
            path: { "${params.outdir}/Parsed_GBKs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: ORTHOFINDER {
        publishDir = [
            path: { "${params.outdir}/Orthofinder" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PARSE_ORTHOFINDER {
        publishDir = [
            path: { "${params.outdir}/Orthofinder/parsed_orthofinder_results" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: ORTHOFINDER_PARING {
        ext.args = "--number_isolates ${params.number_isolates} --percent_inclusion ${params.percent_inclusion}"
        publishDir = [
            path: { "${params.outdir}/Orthofinder/pared_orthofinder_results" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MULTIFASTA_GENERATOR {
        publishDir = [
            path: { "${params.outdir}/Orthofinder/multifasta" },
            mode: 'copy'
        ]
    }
    withName: MUSCLE {
         ext.args = "-threads ${params.number_threads}"
         publishDir = [
            path: { "${params.outdir}/Orthofinder/muscle"}, 
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PRIMER3 {
        publishDir = [
            path: { "${params.outdir}/Primer3" },
            mode: params.publish_dir_mode,
            //saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BOULDER {
        publishDir = [
            path: { "${params.outdir}/boulder" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PARSE_PRIMER3 {
        publishDir = [
            path: { "${params.outdir}/Primer3/parse_primer3" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
